// Code generated by go-bindata.
// sources:
// static/migrations/1_initial.sql
// static/migrations/demo/data.sql
// DO NOT EDIT!

package static

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticMigrations1_initialSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x96\x51\x6f\xa3\x46\x10\xc7\xdf\xf7\x53\x8c\x50\x24\xdb\x69\x12\x35\x51\x2a\x55\x45\x7d\xc0\x66\xec\x6c\x8b\x17\x77\xd9\x6d\x92\x27\x8b\x9a\x95\x8b\x0e\x63\x1f\x2c\xc9\x7d\xfc\xd3\x62\xc0\xd8\xc6\x4e\xee\x12\xde\x98\xfc\x67\x32\xf3\xff\xed\x2c\xbe\xbe\x86\x5f\x56\xf1\x32\x0b\xb5\x02\xb9\x21\x64\xc4\xd1\x11\x08\xf8\x24\x90\x05\xd4\x67\x40\xc7\xc0\x7c\x01\xf8\x44\x03\x11\x80\x55\x14\x71\x74\xbd\xce\xf3\x8d\x65\x13\xd2\x4e\x0e\x74\xa8\xd5\x4a\xa5\x7a\xa8\x96\x71\x5a\xd7\x19\x4b\x36\x12\xa6\x4c\xb1\x89\x42\xad\xe6\x3a\x5e\xa9\x5c\x87\xab\x4d\x7f\x40\x00\x38\x0a\xc9\x59\x00\x82\xd3\xc9\x04\x39\x38\x01\x5c\x1c\x0a\x2f\xc8\x10\x27\x94\x11\x28\x3b\xc1\xc7\x9b\x4b\xa0\x01\xb8\x34\x10\x94\x8d\x04\x8c\xb9\x3f\x05\xdf\x73\x6f\x2e\x09\x80\x78\x40\x23\x84\x52\xb7\x2d\x14\xcd\x43\x0d\x7f\xfc\x09\x8b\x22\xcb\x54\xaa\x77\x75\xed\x52\xb8\xed\xc0\xe8\xcd\x3b\x7a\x01\xb6\xc3\xbe\xe7\x96\x61\xe6\x02\x1d\xdb\x04\x99\x6b\x93\x8e\x06\x3d\x87\x4d\xa4\x33\x41\xd8\x24\x9b\x65\xfe\x35\xb1\xbb\x8d\xc1\x34\x6a\xfc\x15\xcf\x33\x84\x40\x38\x42\x06\x66\x6a\x64\x72\x0a\xfd\x5e\xb8\xd0\xf1\x8b\xea\x5d\x41\xef\xff\x38\x8a\x54\xda\x1b\xd8\xbb\x0c\x67\xe8\x21\x58\x49\x9c\x7e\xb1\xa0\x4f\x00\xac\x38\xb2\xa0\x7e\xa4\xa4\x6e\xf3\x62\x78\x31\xe9\x79\x30\xe3\x74\xea\xf0\x67\xf8\x1b\x9f\xc1\xc5\xb1\x23\x3d\x01\x06\xe0\x7c\xa9\x52\x65\x9a\x9b\xbf\xdc\xf7\x07\x57\xa6\x58\x91\xab\xcc\x3a\x57\xac\x54\xa5\xe1\x4a\xd5\xaa\x7f\x1d\x3e\x7a\x70\x78\xff\xb7\xdb\xbb\xc1\xbe\x2a\xd7\xa1\x2e\xf2\xad\xae\x9a\xf1\xa0\xb1\xf6\x53\x37\xd6\x4c\x6f\x4a\x2c\x32\x55\xc1\xb3\x40\xd0\x29\x06\xc2\x99\xce\xde\x2c\x91\xae\x5f\xeb\x71\x1a\xf8\x87\xf9\x87\xb9\xed\x7c\xf3\x47\xd2\xf6\xbc\x3a\x97\xa5\xeb\xf3\xaa\xa6\x45\x00\x86\x38\xf6\x39\x82\x9c\xb9\x8e\x30\x27\xc6\x67\x15\x19\x02\x30\xf6\x39\xa0\x33\x7a\x00\xee\x3f\x02\x3e\xe1\x48\x0a\x84\x19\xf7\x47\xe8\x4a\x8e\x1d\x8b\x70\xc4\x38\x4c\xe2\x30\xef\x80\x1c\x20\xa7\xce\x1e\xd5\x72\xd6\xb2\xb9\x4a\x77\x1e\x5d\xbe\x09\x17\x86\x5f\x8d\xee\xf6\xee\xf7\xc1\x1b\x50\x96\xc9\xfa\xbf\x30\xd9\x42\x29\xb2\xb4\x69\xe6\x34\xfd\x8f\xa2\x8b\x54\xa2\x7e\x0e\x9d\x49\x97\x8c\xfe\x23\x11\xfa\xad\x79\xaf\xb6\x9d\x0f\xc8\xb1\xd3\x3a\xcc\x96\x4a\x7f\x82\xd5\xfb\x16\x14\x59\x7c\x64\xd4\xed\xaf\x77\xf7\x07\x4e\x65\x45\xd2\x6c\xd3\x5f\x81\xcf\x86\xbb\x6a\xf5\xa8\x87\xe3\x9d\x76\x77\x67\xef\x0f\x6c\x43\xf7\x3f\xea\x5c\x81\xad\x55\x6f\x2d\x41\x65\xe8\xa7\xac\x41\xb2\x5e\x76\x90\x19\xd2\xc9\xc7\xe0\x94\xdb\x55\xe9\x28\x13\x68\xa6\xeb\x90\x55\xf3\x96\xba\x33\xb2\x77\xa2\x5e\xac\xa3\x06\x75\x30\x75\x3c\x8f\x32\xd1\x51\x6d\xb1\x4e\xb5\xfa\xa6\xad\x8e\x13\xf1\xae\x15\x3b\x71\x08\x4a\xa0\xed\x6f\x92\xbb\x7e\x4d\x09\x71\xb9\x3f\x6b\x9b\x6d\xd7\xa1\x53\xcc\x5b\x84\xed\xfd\xf4\xee\xe8\xf6\x22\x3b\x2a\xbb\x7f\x9b\x36\x77\xe7\x41\xf2\x7e\x6c\xf7\xbd\xac\x43\x67\x7e\x5a\xd8\xe4\x7b\x00\x00\x00\xff\xff\x37\xaf\x0e\xdd\xd7\x08\x00\x00")

func staticMigrations1_initialSqlBytes() ([]byte, error) {
	return bindataRead(
		_staticMigrations1_initialSql,
		"static/migrations/1_initial.sql",
	)
}

func staticMigrations1_initialSql() (*asset, error) {
	bytes, err := staticMigrations1_initialSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/migrations/1_initial.sql", size: 2263, mode: os.FileMode(420), modTime: time.Unix(1523360047, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticMigrationsDemoDataSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x5b\x6f\xdb\x46\x13\x7d\xe7\xaf\x98\x10\xfe\x40\x1b\x1f\x37\x12\x25\x4a\x24\x65\xf4\x21\x89\x98\x54\x85\x23\x1b\xb6\xd5\xa2\x28\x82\x60\xb8\x1c\xd2\x5b\xf1\x06\x72\x99\x34\x88\xf3\xdf\x0b\x5e\x2d\xd1\x86\x0c\x07\xaa\x5e\x84\xe5\x5c\xce\xce\xd9\x33\x83\x61\x0c\xfe\x1f\x8b\x30\x47\x49\xb0\xc9\x14\x65\xf7\x7c\x23\x51\x52\x4c\x89\x7c\x4b\xa1\x48\x94\xe5\x25\x9c\x9c\x28\x4b\xf7\xdd\xc5\x9b\x6b\x17\x00\x7c\x8a\xd3\x4d\x41\x39\x00\x6c\x36\xab\x25\x2c\x7e\x81\xb2\x14\xfe\xe7\x90\x12\xaa\xe2\x3f\x7f\x31\x4f\xcf\xce\x15\x80\x2e\x84\x47\x82\x6f\xa1\xfe\x75\x01\x1a\x4e\xed\x89\x33\x99\xf8\xcc\x9b\x1b\x33\x66\x4e\x26\x16\xf3\x66\x8e\xcd\xe6\xfe\x74\x3e\x9d\xf2\xa9\x63\x21\x6a\xbb\x49\x28\x0c\x01\x06\x49\xc6\xce\xcc\x72\x68\x3c\x61\x34\xb6\xe6\xcc\xb4\x1d\x64\x8e\x65\x1a\x2c\x30\x79\x30\xc1\xb9\x85\xbe\x39\xde\x4b\x12\xa4\x79\x8c\xc3\x24\xbe\xe9\xe0\xcc\x98\x33\xf4\x08\x99\x39\x1d\x73\x66\x5b\x38\x65\x86\xe5\x38\x13\xcf\xe6\x73\x32\x67\x7b\x49\x72\x92\xf9\xb7\x41\x12\xc3\x41\x3e\x19\x8f\x91\x71\xb4\x4c\x66\xda\x1c\x99\x3d\xb6\xe7\x6c\x66\x18\xc1\x64\xea\x8f\xb9\x39\xa5\xbd\x24\x19\x16\x45\x96\xe6\x72\x37\x89\xe9\x19\x81\x31\x9e\x4e\x99\xef\x5b\x9c\x99\xb3\x89\xcf\x1c\xd3\xe3\x2c\x20\xcb\x9e\x39\x86\x67\xd1\x7c\xbe\x97\xa4\xa0\x18\xb3\xbb\x34\xa7\x9d\x24\x56\xe0\x78\xb6\x67\x9b\xcc\xb1\xac\x80\x99\x81\xef\x31\x34\xfd\x80\x05\x9e\x61\x39\x86\x13\xa0\xed\x58\xda\xa3\xd7\xb9\xca\xd3\x38\x05\x15\x23\x81\x85\xfa\x5a\x15\xbe\xfa\xbf\xdb\x3f\xaf\xdc\x73\xe5\xad\xfb\x61\xb5\x56\x00\x56\xeb\x1b\xf7\xfa\x16\x56\xeb\xdb\x4b\x50\x23\x91\x6c\x55\x38\x55\xcb\x82\x72\x55\x87\xca\x5d\x07\x35\xc1\x98\xd4\x33\xf8\xfd\xcd\xc5\xc6\xbd\x51\x2a\x7a\x4e\x3b\xa9\xe8\x0d\x8a\x0e\xda\xbb\xea\xff\x15\x30\xb8\x10\xc9\x16\x3e\x62\x82\x21\xe5\x80\x05\x20\xdc\x50\xfe\x45\x70\xd2\xce\xf4\x61\x30\x85\xa1\x0e\x5a\xa5\x00\x06\xf4\x8f\xa4\xc4\x27\x1f\xc2\x14\x42\x92\xc0\x00\x23\x49\x79\x82\x52\x7c\xa1\xea\x81\xa1\x90\x98\xf8\x98\xfb\xa0\x36\x2e\x2a\x7c\x15\xf2\x0e\x10\x02\xfa\x0a\x91\x90\x32\x22\xf0\x4a\x09\x65\x41\x41\x19\x41\x40\x28\xcb\x9c\x8a\x27\x70\x6b\xb9\xe8\xa0\xbd\xaf\x65\xc3\x60\x89\x12\xe1\x5d\x1a\x45\xc4\x65\xfa\xec\xad\x6b\x9d\x54\xd1\x65\xc2\xa5\x48\x13\x8c\x20\x26\x7e\x87\x89\x28\x62\xf0\xb0\x20\x1f\xd2\x04\xaa\x0f\x09\x45\x05\xc8\x14\x32\xca\x2b\x48\xc0\xda\xbf\x80\x9c\x32\x92\xa2\x2a\x2c\xfa\x06\x65\x22\x45\x04\x45\xc9\x39\x15\x45\x50\x46\x4f\x20\x76\xa2\xd2\x41\xbb\xea\xf4\xc5\xe0\x8a\xf2\x22\x4d\x60\xe5\x53\x22\x45\x20\x9e\xa7\xbb\x97\x95\x0e\xda\x4d\x2f\xb1\x0c\x65\xc5\x33\x88\x38\x8b\xea\xe9\x80\xd5\x25\x1b\x6e\xa5\x88\x29\x2d\x25\xa4\x01\x44\x29\xdf\x8e\xca\xa4\xfa\x83\x34\xab\x06\x42\x5d\xca\xa3\x7a\xb5\x7a\x44\xec\xc9\xaa\x51\x1f\x9c\xd6\xfa\xfa\xdc\x88\xaa\xcc\x93\x81\xa6\x3a\x25\x85\x42\xde\x95\xde\xa8\x3e\xf6\x45\x34\x4a\x69\x4d\x14\x86\xbd\xa1\x7b\xca\xd6\x54\x1f\x7b\x63\xf7\x52\xad\xb1\x3e\xf6\xc6\x1d\x52\x5b\x7b\xf7\xa5\x77\xd9\x25\xac\xf5\xe9\x3f\xfd\x44\x9d\x4f\xd7\xf8\x4a\x3b\x53\x00\xae\xdd\xdb\xcd\xf5\x7a\xb5\xfe\x50\x77\x5d\x0d\x5f\x27\x7d\xe8\xe2\x47\x70\x12\xf3\xba\x0b\x06\x78\xa2\xfa\xcb\xcb\x68\xd8\xb3\x1d\xf6\x9d\x94\x59\xb1\x18\x8d\x9a\x3b\xbc\xe6\x69\x3c\xda\x62\x2c\xa2\x62\xdb\x72\xae\x83\xf6\x5d\x69\xe6\xa0\xea\x53\xc1\x73\x91\x55\x6f\xad\x2e\x40\xbd\xca\xd3\xbf\x89\xcb\x4a\x0c\xf5\xfb\x57\x50\x12\xc3\x42\x5d\xc0\x5f\x6a\x91\x73\xf5\x53\x1d\xf8\xa3\x67\x70\x08\xda\x22\xbd\x6e\xc1\x45\xda\x60\x8e\x34\x1d\x4e\x0f\xa1\xc6\x69\x2d\xca\x0c\x43\xda\xc3\xcc\x2a\x93\xfa\x49\xef\xc8\x5f\x80\x06\xf7\xf7\xbb\xb3\xef\xfe\x1e\x34\x1d\xd4\x18\x25\xbf\x53\x17\x60\x74\x17\x84\xc5\x02\x7e\xbb\xb9\x5c\xbf\xdd\x97\xd8\x01\x76\x2a\xd9\xe9\xb0\xde\x5c\x5c\x0c\xc5\x77\x20\xa8\x72\x61\x98\x89\xa3\xb2\x3a\xc4\x7d\xcc\x6a\x07\x3b\x7a\x06\x77\xc0\x2b\x4f\x13\x5f\xd4\x8d\xad\x2e\xe0\xbb\x2a\xbf\x65\x54\x39\x36\x2c\xff\x18\xdc\xa2\xeb\xae\x03\xd5\x37\x1d\xb7\x4f\xda\x4e\xdf\x1d\x88\xec\x7b\xf1\x25\xbc\x0d\x2e\xf8\x04\xd2\x63\xa6\x3a\xa7\x17\x32\x35\x54\xe0\x00\x7a\x77\x72\x1c\xa8\xf2\x61\x9a\xb4\x1c\x9d\x2b\xee\x7a\x79\xae\x9c\x9c\x9c\x3f\xbd\xb9\xb9\x89\xbf\xbf\xd3\x2d\xd3\xaf\xc9\x8b\xb6\xbc\x87\xa5\xed\x18\x3b\xdb\x31\x56\xb6\x63\x6c\x6c\xc7\x58\xd8\x8e\xb1\xaf\xbd\x74\x5d\xeb\xd6\xb0\xa5\x7b\xe1\xde\xba\xf0\xfe\xfa\xf2\x63\x3f\xd8\x15\x80\x3f\x7e\x75\xaf\x5d\xe8\xe7\x3b\xac\xd6\xfd\x48\xad\xc7\x55\x3b\x08\xda\x4e\x7c\xd0\x7b\x7f\xa1\x76\x5f\xdf\x49\xde\xcc\xc9\xff\x26\x77\xbd\x3f\x3e\xa4\xfe\xd9\xac\xcf\xb7\xc0\xbf\x01\x00\x00\xff\xff\x41\x19\x00\xcd\xe6\x0c\x00\x00")

func staticMigrationsDemoDataSqlBytes() ([]byte, error) {
	return bindataRead(
		_staticMigrationsDemoDataSql,
		"static/migrations/demo/data.sql",
	)
}

func staticMigrationsDemoDataSql() (*asset, error) {
	bytes, err := staticMigrationsDemoDataSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/migrations/demo/data.sql", size: 3302, mode: os.FileMode(420), modTime: time.Unix(1523361471, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/migrations/1_initial.sql": staticMigrations1_initialSql,
	"static/migrations/demo/data.sql": staticMigrationsDemoDataSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"migrations": &bintree{nil, map[string]*bintree{
			"1_initial.sql": &bintree{staticMigrations1_initialSql, map[string]*bintree{}},
			"demo": &bintree{nil, map[string]*bintree{
				"data.sql": &bintree{staticMigrationsDemoDataSql, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

