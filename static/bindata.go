// Code generated by go-bindata.
// sources:
// static/migrations/1_initial.sql
// static/migrations/demo/data.sql
// DO NOT EDIT!

package static

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticMigrations1_initialSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x95\x5d\x6f\xda\x4a\x10\x86\xef\xf7\x57\x8c\xac\x48\x40\x4e\x12\x9d\x44\x39\xd2\xd1\xb1\xce\x85\xc1\x03\xd9\xd6\xac\xe9\x7e\x34\xc9\x15\x72\xf1\x8a\x5a\x35\x86\xda\xeb\xa4\x3f\xbf\x5a\x83\xc1\x80\x49\xfa\x11\xd5\x77\x1e\x66\x5e\x66\xde\xc7\xb3\x7b\x79\x09\x7f\x2d\x92\x79\x1e\x19\x0d\x6a\x45\xc8\x80\xa3\x27\x11\xf0\x41\x22\x13\x34\x64\x40\x87\xc0\x42\x09\xf8\x40\x85\x14\xe0\x94\x65\x12\x5f\x2e\x8b\x62\xe5\xb8\x84\x34\x8b\x85\x89\x8c\x5e\xe8\xcc\xf4\xf5\x3c\xc9\x6a\x9d\xa1\x62\x03\x69\x65\xca\x55\x1c\x19\x3d\x35\xc9\x42\x17\x26\x5a\xac\xba\x3d\x02\xc0\x51\x2a\xce\x04\x48\x4e\x47\x23\xe4\xe0\x09\x38\x3b\x4c\x3c\x23\x7d\x1c\x51\x46\xa0\xea\x04\xef\xaf\xce\x81\x0a\xf0\xa9\x90\x94\x0d\x24\x0c\x79\x38\x86\x30\xf0\xaf\xce\x09\x80\xbc\x43\x9b\x08\x55\xde\x5a\x28\x9e\x46\x06\xfe\xfb\x1f\x66\x65\x9e\xeb\xcc\xec\x74\xdd\x2a\x71\xdd\x81\xcd\xb7\xef\x18\x08\x6c\x86\xc3\xc0\xaf\xc2\xcc\x07\x3a\x74\x09\x32\xdf\x25\x2d\x0d\x06\x1e\x1b\x29\x6f\x84\xb0\x4a\x57\xf3\xe2\x6b\xea\xb6\x1b\x83\x59\xbc\xf5\x57\x3e\x4e\x10\x84\xf4\xa4\x12\x76\x6a\x64\x6a\x0c\xdd\x4e\x34\x33\xc9\x93\xee\x5c\x40\xe7\x73\x12\xc7\x3a\xeb\xf4\xdc\x5d\x85\xd7\x0f\x10\x9c\x34\xc9\xbe\x38\xd0\x25\x00\x4e\x12\x3b\x50\x3f\x4a\x51\x7f\xfb\x62\x79\x31\x15\x04\x30\xe1\x74\xec\xf1\x47\x78\x8f\x8f\xe0\xe3\xd0\x53\x81\x04\x0b\x70\x3a\xd7\x99\xb6\xcd\x4d\x9f\x6e\xbb\xbd\x0b\x2b\x56\x16\x3a\x77\x5e\x12\xab\xb2\xb2\x68\xa1\xeb\xac\x8f\x1e\x1f\xdc\x79\xbc\xfb\xcf\xf5\x4d\x6f\x3f\xab\x30\x91\x29\x8b\x75\xde\x66\xc6\x83\xc6\x9a\x4f\xdd\xd8\x76\x7a\x2b\x31\xcb\xf5\x06\x9e\x03\x92\x8e\x51\x48\x6f\x3c\x79\x55\x22\x5b\x3e\xd7\xe3\x6c\xe1\x1f\xd6\x1f\xd6\x36\xeb\xed\x8f\xa4\xe9\xf9\xe6\xbb\xac\x5c\x9f\x6e\x34\x1d\x02\xd0\xc7\x61\xc8\x11\xd4\xc4\xf7\xa4\xfd\x62\x42\xb6\x21\x43\x00\x86\x21\x07\xf4\x06\x77\xc0\xc3\x7b\xc0\x07\x1c\x28\x89\x30\xe1\xe1\x00\x7d\xc5\xb1\x65\x11\x8e\x18\x47\x69\x12\x15\x2d\x90\x05\x72\xea\xed\x51\xad\x66\xad\x9a\xdb\xe4\xbd\x8c\xae\x58\x45\x33\xcb\xaf\x46\x77\x7d\xf3\x6f\xef\x15\x28\xf3\x74\xf9\x29\x4a\xd7\x50\xca\x3c\xdb\x36\x73\x9a\xfe\xef\xa2\x8b\x75\xaa\x7f\x0d\x9d\x2d\x57\x8c\x7e\x50\x08\xdd\xc6\xbc\x17\xeb\xce\x7b\xe4\xd8\x69\x13\xe5\x73\x6d\xde\xc0\xea\x7d\x0b\xca\x3c\x39\x32\xea\xfa\xef\x9b\xdb\x03\xa7\xf2\x32\xdd\x6e\xd3\x3b\x11\xb2\xfe\x4e\xad\x1e\xf5\x70\xbc\xd3\xee\xee\xec\xfd\x89\x6d\x68\xff\xa3\xd6\x15\x58\x5b\xf5\xda\x12\x6c\x0c\x7d\x93\x35\x48\x97\xf3\x16\x32\x7d\x3a\xfa\x23\x70\x66\xcb\xcc\xe8\x6f\xc6\x69\x81\xf3\x43\x5f\xfb\x09\x1e\x95\xb7\xcd\xeb\xc1\x5f\x3e\x67\x84\xf8\x3c\x9c\x34\xe7\x76\xeb\xd0\x29\xfb\x1b\x66\xbb\xfb\xe5\xed\xd1\xf5\x99\x72\x24\xbb\x7f\xb0\x6d\x8f\xb1\x83\xe2\xfd\xd8\xee\xea\xaa\x43\x2f\xdc\xf2\x2e\xf9\x1e\x00\x00\xff\xff\xf0\x23\x89\x85\x62\x08\x00\x00")

func staticMigrations1_initialSqlBytes() ([]byte, error) {
	return bindataRead(
		_staticMigrations1_initialSql,
		"static/migrations/1_initial.sql",
	)
}

func staticMigrations1_initialSql() (*asset, error) {
	bytes, err := staticMigrations1_initialSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/migrations/1_initial.sql", size: 2146, mode: os.FileMode(420), modTime: time.Unix(1522148064, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticMigrationsDemoDataSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x56\x5d\x4f\xeb\x46\x13\xbe\xf7\xaf\x98\x63\x21\x19\xf4\x66\x4f\xe2\xd8\x89\x6d\xd0\x7b\x71\x0e\xf1\x69\x23\xd1\x80\x80\xb4\x97\x68\xbc\x1e\x9b\x2d\xfe\xd2\x7a\x0d\x3d\xaa\xfa\xdf\xab\xf5\x17\x49\x40\xa0\x16\x55\xea\x45\xb9\xc0\xda\x9d\xd9\x67\xf6\x99\x79\x66\x33\x8c\xc1\xff\x72\x91\x4a\x54\x04\xdb\xca\x30\x76\xd7\x37\x0a\x15\xe5\x54\xa8\xaf\x94\x8a\xc2\x58\x5d\xc2\xd1\x91\xb1\x0a\xcf\x2f\xbe\x5c\x87\x00\x10\x53\x5e\x6e\x6b\x92\x00\xdb\xed\x7a\x05\xa7\xff\x87\xa6\x11\xf1\x5d\x4a\x05\xe9\xe3\x77\x8f\xee\xf1\xc9\x99\x01\x30\x9c\xe0\x99\xe0\x0f\xa0\xff\x06\x7f\x0b\x1d\x7f\x1e\xcc\xe7\x31\x8b\x96\xf6\x82\xb9\xf3\xb9\xc7\xa2\x45\xe0\xb3\x65\xec\x2c\x1d\x87\x3b\x81\x87\x68\xed\x62\x50\x9a\x02\xec\x63\xcc\x82\x85\x17\xd0\x6c\xce\x68\xe6\x2d\x99\xeb\x07\xc8\x02\xcf\xb5\x59\xe2\xf2\x64\x8e\x4b\x0f\x63\x77\xb6\x87\x91\x94\x32\xc7\x03\x8c\xd8\x0d\x70\x61\x2f\x19\x46\x84\xcc\x75\x66\x9c\xf9\x1e\x3a\xcc\xf6\x82\x60\x1e\xf9\x7c\x49\xee\x62\x0f\x43\x92\x92\xdf\xf7\x31\xec\x00\xf9\x7c\x36\x43\xc6\xd1\x73\x99\xeb\x73\x64\xfe\xcc\x5f\xb2\x85\x6d\x27\x73\x27\x9e\x71\xd7\xa1\x3d\x8c\x0a\xeb\xba\x2a\xa5\xda\xc1\x70\x23\x3b\xb1\x67\x8e\xc3\xe2\xd8\xe3\xcc\x5d\xcc\x63\x16\xb8\x11\x67\x09\x79\xfe\x22\xb0\x23\x8f\x96\xcb\x3d\x8c\x9a\x72\xac\xee\x4b\x49\xcf\x18\x5e\x12\x44\x7e\xe4\xbb\x2c\xf0\xbc\x84\xb9\x49\x1c\x31\x74\xe3\x84\x25\x91\xed\x05\x76\x90\xa0\x1f\x78\xd6\x99\xf1\x35\xfc\x61\xbd\x31\x00\xd6\x9b\x9b\xf0\xfa\x16\xd6\x9b\xdb\x4b\x30\x33\x51\x3c\x98\x70\x6c\x36\x35\x49\x73\x02\xa6\x88\xf5\xff\x02\x73\x32\x4f\xe0\xe7\x2f\x17\xdb\xf0\xc6\xd0\xa4\x8f\x87\xda\x4f\xba\xaa\x4e\xc0\x3a\xd7\xdf\x4f\xc0\xe0\x9a\x12\x92\x12\x33\xb8\xca\x50\xe9\x5c\x03\xd6\x80\x70\x43\xf2\x51\x70\xb2\x4e\x26\x87\x08\x94\xa6\x13\xb0\x74\x65\x19\xd0\x6f\x8a\x8a\x98\x62\x48\x4b\x48\x49\x01\x03\xcc\x14\xc9\x02\x95\x78\x24\x5d\x39\xa8\x15\x16\x31\xca\x18\xcc\xce\xc5\x84\x27\xa1\xee\x01\x21\xa1\x27\xc8\x84\x52\x19\x41\xd4\x28\x68\x6a\x4a\x9a\x0c\x12\x42\xd5\x48\xaa\x5f\x89\xdb\xea\x60\x02\xd6\xb7\x56\x0f\x0c\x56\xa8\x10\xce\xcb\x2c\x23\xae\x4a\xf9\xde\xad\x5b\x05\xe8\xd3\x4d\xc1\x95\x28\x0b\xcc\x20\x27\x7e\x8f\x85\xa8\x73\x88\xb0\xa6\x18\xca\x02\xf4\x46\x41\x59\x0d\xaa\x84\x8a\x64\x97\x8e\xd6\xbf\x06\x49\x15\x29\xa1\x89\x65\xdf\xa1\x29\x94\xc8\xa0\x6e\x38\xa7\xba\x4e\x9a\xec\x95\x88\x83\x5e\x26\x60\x5d\x0d\xd2\x61\x70\x45\xb2\x2e\x0b\x58\xc7\x54\x28\x91\x08\x7a\xf7\xe2\xa3\x64\x26\x60\xdd\x8c\xf2\xa9\x50\xe9\x3c\x83\xc8\xab\xac\xed\x79\xd4\x97\xec\x72\xab\x44\x4e\x65\xa3\xa0\x4c\x20\x2b\xf9\xc3\xb4\x29\xf4\x07\xca\x4a\xf7\x79\x4b\xe5\x05\x5f\xab\xed\xfc\x3d\x6d\x61\x26\xb0\xd6\xe2\xd2\x22\xbb\xeb\x94\xd5\xc8\xe2\x40\x58\x83\x9c\x52\xa1\xee\x9b\x68\xda\x2e\x3f\x8d\x2c\x3a\xa9\xf4\x36\x4a\xd3\xd1\x30\xd4\xb2\x37\xb5\xcb\xd1\x38\x94\xaa\x37\xb6\xcb\xd1\xb8\x93\xd5\xde\x3e\xec\x8c\x2e\xbb\x19\xeb\x7d\xc6\xad\x57\x88\x2a\x94\xad\x2e\x0f\x98\x0a\xfd\x91\x4d\x76\xd8\x4a\x03\xe3\x7b\xa5\xaa\xfa\x74\x3a\xed\x22\x7c\xe6\x65\x3e\x7d\xc0\x5c\x64\xf5\x43\x97\x05\x6b\x02\xd6\xef\x46\xf7\xf8\x99\x31\xd5\x5c\x8a\x4a\x67\xdf\x3c\x05\xf3\x4a\x96\xbf\x12\x57\xba\x3c\x6d\x45\xcc\xd6\xef\x8f\x91\xc1\x61\x8c\x1e\xf8\x73\x1f\x4b\x94\x5d\x88\xe9\x3b\x31\xf2\xb2\x15\x45\x85\x29\x1d\x46\xe8\x2a\xf3\x06\x07\x5d\xad\x09\x6c\xb6\x17\x17\x87\x35\x7b\xe3\x90\x76\x61\x58\x89\x8f\x70\x3f\x0c\xf3\x92\xfb\x10\xe5\x03\xf4\x07\x89\xbd\xc1\xa5\x93\xdd\x7e\x0a\x76\xc4\xf7\xc6\xc9\x51\x90\x1f\xc8\xc2\x2b\x91\x5e\x26\x62\x70\xfa\x40\x22\x76\x7b\xe5\x0d\x4a\xcf\xfd\xd3\x27\xe4\xcc\x08\x37\xab\x33\xe3\xe8\xe8\xec\xf5\x11\x24\x2c\xe2\xfd\xe1\x64\x55\x3e\x15\x7f\x69\x5c\xf9\x6f\xfc\xf8\x37\x8e\x1f\xab\xf0\x22\xbc\x0d\xe1\xdb\xf5\xe5\x4f\xe3\xcb\x69\x00\xfc\xf2\x63\x78\x1d\xc2\xf8\x80\xc2\x7a\x33\x3e\x62\xed\x4b\xd3\x37\x75\xdf\x76\xcf\xe2\x1e\x2f\xd4\x4f\x9e\x3b\xe0\xdd\xef\xcf\x3f\x83\xdd\xce\x4d\xcf\xd0\x7f\x17\xf5\xfd\x16\xf8\x33\x00\x00\xff\xff\x89\x3d\x26\xb3\xaf\x0b\x00\x00")

func staticMigrationsDemoDataSqlBytes() ([]byte, error) {
	return bindataRead(
		_staticMigrationsDemoDataSql,
		"static/migrations/demo/data.sql",
	)
}

func staticMigrationsDemoDataSql() (*asset, error) {
	bytes, err := staticMigrationsDemoDataSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/migrations/demo/data.sql", size: 2991, mode: os.FileMode(420), modTime: time.Unix(1522150698, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/migrations/1_initial.sql": staticMigrations1_initialSql,
	"static/migrations/demo/data.sql": staticMigrationsDemoDataSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"migrations": &bintree{nil, map[string]*bintree{
			"1_initial.sql": &bintree{staticMigrations1_initialSql, map[string]*bintree{}},
			"demo": &bintree{nil, map[string]*bintree{
				"data.sql": &bintree{staticMigrationsDemoDataSql, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

