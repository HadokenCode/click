// Code generated by go-bindata.
// sources:
// static/migrations/1_initial.sql
// static/migrations/demo/data.sql
// DO NOT EDIT!

package static

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticMigrations1_initialSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x95\x5d\x6f\xda\x4a\x10\x86\xef\xf7\x57\x8c\xac\x48\x40\x4e\x12\x9d\x44\x39\xd2\xd1\xb1\xce\x85\xc1\x03\xd9\xd6\xac\xe9\x7e\x34\xc9\x15\x72\xf1\x8a\x5a\x35\x86\xda\xeb\xa4\x3f\xbf\x5a\x83\xc1\x80\x49\xfa\x11\xd5\x77\x1e\x66\x5e\x66\xde\xc7\xb3\x7b\x79\x09\x7f\x2d\x92\x79\x1e\x19\x0d\x6a\x45\xc8\x80\xa3\x27\x11\xf0\x41\x22\x13\x34\x64\x40\x87\xc0\x42\x09\xf8\x40\x85\x14\xe0\x94\x65\x12\x5f\x2e\x8b\x62\xe5\xb8\x84\x34\x8b\x85\x89\x8c\x5e\xe8\xcc\xf4\xf5\x3c\xc9\x6a\x9d\xa1\x62\x03\x69\x65\xca\x55\x1c\x19\x3d\x35\xc9\x42\x17\x26\x5a\xac\xba\x3d\x02\xc0\x51\x2a\xce\x04\x48\x4e\x47\x23\xe4\xe0\x09\x38\x3b\x4c\x3c\x23\x7d\x1c\x51\x46\xa0\xea\x04\xef\xaf\xce\x81\x0a\xf0\xa9\x90\x94\x0d\x24\x0c\x79\x38\x86\x30\xf0\xaf\xce\x09\x80\xbc\x43\x9b\x08\x55\xde\x5a\x28\x9e\x46\x06\xfe\xfb\x1f\x66\x65\x9e\xeb\xcc\xec\x74\xdd\x2a\x71\xdd\x81\xcd\xb7\xef\x18\x08\x6c\x86\xc3\xc0\xaf\xc2\xcc\x07\x3a\x74\x09\x32\xdf\x25\x2d\x0d\x06\x1e\x1b\x29\x6f\x84\xb0\x4a\x57\xf3\xe2\x6b\xea\xb6\x1b\x83\x59\xbc\xf5\x57\x3e\x4e\x10\x84\xf4\xa4\x12\x76\x6a\x64\x6a\x0c\xdd\x4e\x34\x33\xc9\x93\xee\x5c\x40\xe7\x73\x12\xc7\x3a\xeb\xf4\xdc\x5d\x85\xd7\x0f\x10\x9c\x34\xc9\xbe\x38\xd0\x25\x00\x4e\x12\x3b\x50\x3f\x4a\x51\x7f\xfb\x62\x79\x31\x15\x04\x30\xe1\x74\xec\xf1\x47\x78\x8f\x8f\xe0\xe3\xd0\x53\x81\x04\x0b\x70\x3a\xd7\x99\xb6\xcd\x4d\x9f\x6e\xbb\xbd\x0b\x2b\x56\x16\x3a\x77\x5e\x12\xab\xb2\xb2\x68\xa1\xeb\xac\x8f\x1e\x1f\xdc\x79\xbc\xfb\xcf\xf5\x4d\x6f\x3f\xab\x30\x91\x29\x8b\x75\xde\x66\xc6\x83\xc6\x9a\x4f\xdd\xd8\x76\x7a\x2b\x31\xcb\xf5\x06\x9e\x03\x92\x8e\x51\x48\x6f\x3c\x79\x55\x22\x5b\x3e\xd7\xe3\x6c\xe1\x1f\xd6\x1f\xd6\x36\xeb\xed\x8f\xa4\xe9\xf9\xe6\xbb\xac\x5c\x9f\x6e\x34\x1d\x02\xd0\xc7\x61\xc8\x11\xd4\xc4\xf7\xa4\xfd\x62\x42\xb6\x21\x43\x00\x86\x21\x07\xf4\x06\x77\xc0\xc3\x7b\xc0\x07\x1c\x28\x89\x30\xe1\xe1\x00\x7d\xc5\xb1\x65\x11\x8e\x18\x47\x69\x12\x15\x2d\x90\x05\x72\xea\xed\x51\xad\x66\xad\x9a\xdb\xe4\xbd\x8c\xae\x58\x45\x33\xcb\xaf\x46\x77\x7d\xf3\x6f\xef\x15\x28\xf3\x74\xf9\x29\x4a\xd7\x50\xca\x3c\xdb\x36\x73\x9a\xfe\xef\xa2\x8b\x75\xaa\x7f\x0d\x9d\x2d\x57\x8c\x7e\x50\x08\xdd\xc6\xbc\x17\xeb\xce\x7b\xe4\xd8\x69\x13\xe5\x73\x6d\xde\xc0\xea\x7d\x0b\xca\x3c\x39\x32\xea\xfa\xef\x9b\xdb\x03\xa7\xf2\x32\xdd\x6e\xd3\x3b\x11\xb2\xfe\x4e\xad\x1e\xf5\x70\xbc\xd3\xee\xee\xec\xfd\x89\x6d\x68\xff\xa3\xd6\x15\x58\x5b\xf5\xda\x12\x6c\x0c\x7d\x93\x35\x48\x97\xf3\x16\x32\x7d\x3a\xfa\x23\x70\x66\xcb\xcc\xe8\x6f\xc6\x69\x81\xf3\x43\x5f\xfb\x09\x1e\x95\xb7\xcd\xeb\xc1\x5f\x3e\x67\x84\xf8\x3c\x9c\x34\xe7\x76\xeb\xd0\x29\xfb\x1b\x66\xbb\xfb\xe5\xed\xd1\xf5\x99\x72\x24\xbb\x7f\xb0\x6d\x8f\xb1\x83\xe2\xfd\xd8\xee\xea\xaa\x43\x2f\xdc\xf2\x2e\xf9\x1e\x00\x00\xff\xff\xf0\x23\x89\x85\x62\x08\x00\x00")

func staticMigrations1_initialSqlBytes() ([]byte, error) {
	return bindataRead(
		_staticMigrations1_initialSql,
		"static/migrations/1_initial.sql",
	)
}

func staticMigrations1_initialSql() (*asset, error) {
	bytes, err := staticMigrations1_initialSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/migrations/1_initial.sql", size: 2146, mode: os.FileMode(420), modTime: time.Unix(1522148064, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticMigrationsDemoDataSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x5d\x6f\xdb\x46\x10\x7c\xe7\xaf\xd8\x10\x2e\x68\xa3\xbc\x48\x94\x28\x91\x94\xd1\x87\x24\x62\x52\x15\x8e\x6c\xd8\x56\x8b\xa2\x08\x82\xe5\x71\x49\x5f\xcd\x2f\x90\xc7\xa4\x41\x9c\xff\x5e\xf0\xd3\x12\x2d\xc8\x48\xaa\xea\x85\x20\x6f\x77\xe6\x6e\x6e\x76\xb5\x8c\xc1\xcf\xb1\x08\x73\x94\x04\x9b\x4c\x51\xb6\xdf\x6f\x24\x4a\x8a\x29\x91\xaf\x29\x14\x89\xb2\xbc\x84\x93\x13\x65\xe9\xbe\xb9\x78\x75\xed\x02\x80\x4f\x71\xba\x29\x28\x07\x80\xcd\x66\xb5\x84\xc5\x2f\x50\x96\xc2\xff\x18\x52\x42\x55\xfe\xc7\x4f\xe6\xe9\xd9\xb9\x02\xd0\xa5\xf0\x48\xf0\x7b\xa8\x7f\x5d\x82\x86\x53\x7b\xe2\x4c\x26\x3e\xf3\xe6\xc6\x8c\x99\x93\x89\xc5\xbc\x99\x63\xb3\xb9\x3f\x9d\x4f\xa7\x7c\xea\x58\x88\xda\x36\x08\x85\x21\xc0\x00\x64\xec\xcc\x2c\x87\xc6\x13\x46\x63\x6b\xce\x4c\xdb\x41\xe6\x58\xa6\xc1\x02\x93\x07\x13\x9c\x5b\xe8\x9b\xe3\x1d\x90\x20\xcd\x63\x1c\x82\xf8\xa6\x83\x33\x63\xce\xd0\x23\x64\xe6\x74\xcc\x99\x6d\xe1\x94\x19\x96\xe3\x4c\x3c\x9b\xcf\xc9\x9c\xed\x80\xe4\x24\xf3\x2f\x03\x10\xc3\x41\x3e\x19\x8f\x91\x71\xb4\x4c\x66\xda\x1c\x99\x3d\xb6\xe7\x6c\x66\x18\xc1\x64\xea\x8f\xb9\x39\xa5\x1d\x90\x0c\x8b\x22\x4b\x73\xb9\x0d\x62\x7a\x46\x60\x8c\xa7\x53\xe6\xfb\x16\x67\xe6\x6c\xe2\x33\xc7\xf4\x38\x0b\xc8\xb2\x67\x8e\xe1\x59\x34\x9f\xef\x80\x14\x14\x63\x76\x97\xe6\xb4\x05\x62\x05\x8e\x67\x7b\xb6\xc9\x1c\xcb\x0a\x98\x19\xf8\x1e\x43\xd3\x0f\x58\xe0\x19\x96\x63\x38\x01\xda\x8e\xa5\x3d\xb9\x9d\xab\x3c\x8d\x53\x50\x31\x12\x58\xa8\x2f\x55\xe1\xab\x3f\xdd\xfe\x79\xe5\x9e\x2b\xaf\xdd\x77\xab\xb5\x02\xb0\x5a\xdf\xb8\xd7\xb7\xb0\x5a\xdf\x5e\x82\x1a\x89\xe4\x5e\x85\x53\xb5\x2c\x28\x57\x75\xa8\xc2\x75\x50\x13\x8c\x49\x3d\x83\xdf\x5f\x5d\x6c\xdc\x1b\xa5\x92\xe7\xb4\xb3\x8a\xde\xb0\xe8\xa0\xbd\xa9\x9e\x2f\x80\xc1\x85\x48\xee\xe1\x3d\x26\x18\x52\x0e\x58\x00\xc2\x0d\xe5\x9f\x04\x27\xed\x4c\x1f\x26\x53\x18\xea\xa0\x55\x0e\x60\x40\xff\x48\x4a\x7c\xf2\x21\x4c\x21\x24\x09\x0c\x30\x92\x94\x27\x28\xc5\x27\xaa\x2e\x18\x0a\x89\x89\x8f\xb9\x0f\x6a\x13\xa2\xc2\x67\x21\xef\x00\x21\xa0\xcf\x10\x09\x29\x23\x02\xaf\x94\x50\x16\x14\x94\x11\x04\x84\xb2\xcc\xa9\xd8\xc3\x5b\xdb\x45\x07\xed\x6d\x6d\x1b\x06\x4b\x94\x08\x6f\xd2\x28\x22\x2e\xd3\x67\x77\x5d\xfb\xa4\xca\x2e\x13\x2e\x45\x9a\x60\x04\x31\xf1\x3b\x4c\x44\x11\x83\x87\x05\xf9\x90\x26\x50\x7d\x48\x28\x2a\x40\xa6\x90\x51\x5e\x51\x02\xd6\xf1\x05\xe4\x94\x91\x14\xd5\xc1\xa2\x2f\x50\x26\x52\x44\x50\x94\x9c\x53\x51\x04\x65\xb4\x87\xb1\x33\x95\x0e\xda\x55\xe7\x2f\x06\x57\x94\x17\x69\x02\x2b\x9f\x12\x29\x02\xf1\xbc\xdc\xbd\xad\x74\xd0\x6e\x7a\x8b\x65\x28\x2b\x9d\x41\xc4\x59\x54\x77\x07\xac\x36\xd9\x68\x2b\x45\x4c\x69\x29\x21\x0d\x20\x4a\xf9\xfd\xa8\x4c\xaa\x07\xa4\x59\xd5\x10\xea\xa3\x3c\x39\xaf\x56\xb7\x88\x1d\x5b\x35\xee\x83\xd3\xda\x5f\x1f\x1b\x53\x95\x79\x32\xf0\x54\xe7\xa4\x50\xc8\xbb\xd2\x1b\xd5\xaf\xfd\x21\x1a\xa7\xb4\x4b\x14\x86\xfd\x42\x77\x95\xed\x52\xfd\xda\x2f\x76\x37\xd5\x2e\xd6\xaf\xfd\xe2\x96\xa8\xed\x7a\xf7\xa5\x0f\xd9\x16\xac\x8d\xe9\x3f\xfd\xc0\x39\xf7\x9f\xf1\x85\x76\xa6\x00\x5c\xbb\xb7\x9b\xeb\xf5\x6a\xfd\xae\xae\xba\x9a\xbe\x06\x7d\xac\xe2\x27\x74\x12\xf3\xba\x0a\x06\x7c\xa2\x7a\xe4\x65\x34\xac\xd9\x8e\xfb\x4e\xca\xac\x58\x8c\x46\xcd\x1e\x5e\xf2\x34\x1e\xdd\x63\x2c\xa2\xe2\xbe\xd5\x5c\x07\xed\xab\xd2\xf4\x41\xd5\xa7\x82\xe7\x22\xab\xee\x5a\x5d\x80\x7a\x95\xa7\x7f\x13\x97\x95\x19\xea\xfb\xaf\xa8\x24\x86\x85\xba\x80\xbf\xd4\x22\xe7\xea\x87\x3a\xf1\x5b\xaf\xe0\x90\xb4\x65\x7a\xd9\x92\x8b\xb4\xe1\x1c\x69\x3a\x9c\x1e\x62\x8d\xd3\xda\x94\x19\x86\xb4\xc3\x99\x55\x4b\xea\x07\xbd\x13\x7f\x01\x1a\x3c\x3c\x6c\xf7\xbe\x87\x07\xd0\x74\x50\x63\x94\xfc\x4e\x5d\x80\xd1\x6d\x10\x16\x0b\xf8\xed\xe6\x72\xfd\x7a\xd7\x62\x07\xd4\xa9\x6c\xa7\xc3\x7a\x73\x71\x31\x34\xdf\x81\xa4\x2a\x84\x61\x26\x8e\xaa\xea\x90\xf7\xa9\xaa\x1d\xed\xe8\x19\xde\xe7\x75\xe5\x69\xe2\x8b\xba\xd6\xd5\x05\x7c\x55\xe5\x97\x8c\xaa\xdc\x26\xe0\xdb\x3e\x65\x07\xc5\x77\x40\x9c\xa6\x20\x77\x35\xdd\x2a\xcb\x03\x99\x7d\xa9\x1e\x53\xd6\x3d\xd4\x4f\x95\xed\x82\xfe\xa3\xb2\x03\xea\xed\x4e\x73\xe0\xd8\x8f\xdd\xa7\x15\xed\x5c\x71\xd7\xcb\x73\xe5\xe4\xe4\x7c\xff\xa4\xe7\x26\xfe\xee\x0c\xb8\x4c\x3f\x27\xdf\x35\x15\x3e\x0e\x79\xc7\x98\xf1\x8e\x31\xe2\x1d\x63\xc2\x3b\xc6\x80\x77\x8c\xf9\xee\x7b\xc7\xbb\x6e\x6c\x5b\xba\x17\xee\xad\x0b\x6f\xaf\x2f\xdf\xf7\x7f\x04\x0a\xc0\x1f\xbf\xba\xd7\x2e\xf4\xff\x07\xb0\x5a\xf7\x2d\xb8\x6e\x6f\x6d\xe3\x68\x4b\xf3\xd1\xef\xfd\x86\xda\xf9\x7e\x0b\xbc\xe9\xab\xff\x0f\x76\x3d\x6f\x3e\x42\xff\x28\xea\xf3\x25\xf0\x6f\x00\x00\x00\xff\xff\x5b\xf9\x6f\xdb\x16\x0d\x00\x00")

func staticMigrationsDemoDataSqlBytes() ([]byte, error) {
	return bindataRead(
		_staticMigrationsDemoDataSql,
		"static/migrations/demo/data.sql",
	)
}

func staticMigrationsDemoDataSql() (*asset, error) {
	bytes, err := staticMigrationsDemoDataSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/migrations/demo/data.sql", size: 3350, mode: os.FileMode(420), modTime: time.Unix(1523206938, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/migrations/1_initial.sql": staticMigrations1_initialSql,
	"static/migrations/demo/data.sql": staticMigrationsDemoDataSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"migrations": &bintree{nil, map[string]*bintree{
			"1_initial.sql": &bintree{staticMigrations1_initialSql, map[string]*bintree{}},
			"demo": &bintree{nil, map[string]*bintree{
				"data.sql": &bintree{staticMigrationsDemoDataSql, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

