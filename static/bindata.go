// Code generated by go-bindata.
// sources:
// static/migrations/1_initial.sql
// DO NOT EDIT!

package static

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticMigrations1_initialSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x96\x51\x6f\xa3\x46\x10\xc7\xdf\xf7\x53\x8c\x50\x24\xdb\x69\x12\x35\x51\x2a\x55\x45\x7d\xc0\x66\xec\x6c\x8b\x17\x77\xd9\x6d\x92\x27\x8b\x9a\x95\x8b\x0e\x63\x1f\x2c\xc9\x7d\xfc\xd3\x62\xc0\xd8\xc6\x4e\xee\x12\xde\x98\xfc\x67\x32\xf3\xff\xed\x2c\xbe\xbe\x86\x5f\x56\xf1\x32\x0b\xb5\x02\xb9\x21\x64\xc4\xd1\x11\x08\xf8\x24\x90\x05\xd4\x67\x40\xc7\xc0\x7c\x01\xf8\x44\x03\x11\x80\x55\x14\x71\x74\xbd\xce\xf3\x8d\x65\x13\xd2\x4e\x0e\x74\xa8\xd5\x4a\xa5\x7a\xa8\x96\x71\x5a\xd7\x19\x4b\x36\x12\xa6\x4c\xb1\x89\x42\xad\xe6\x3a\x5e\xa9\x5c\x87\xab\x4d\x7f\x40\x00\x38\x0a\xc9\x59\x00\x82\xd3\xc9\x04\x39\x38\x01\x5c\x1c\x0a\x2f\xc8\x10\x27\x94\x11\x28\x3b\xc1\xc7\x9b\x4b\xa0\x01\xb8\x34\x10\x94\x8d\x04\x8c\xb9\x3f\x05\xdf\x73\x6f\x2e\x09\x80\x78\x40\x23\x84\x52\xb7\x2d\x14\xcd\x43\x0d\x7f\xfc\x09\x8b\x22\xcb\x54\xaa\x77\x75\xed\x52\xb8\xed\xc0\xe8\xcd\x3b\x7a\x01\xb6\xc3\xbe\xe7\x96\x61\xe6\x02\x1d\xdb\x04\x99\x6b\x93\x8e\x06\x3d\x87\x4d\xa4\x33\x41\xd8\x24\x9b\x65\xfe\x35\xb1\xbb\x8d\xc1\x34\x6a\xfc\x15\xcf\x33\x84\x40\x38\x42\x06\x66\x6a\x64\x72\x0a\xfd\x5e\xb8\xd0\xf1\x8b\xea\x5d\x41\xef\xff\x38\x8a\x54\xda\x1b\xd8\xbb\x0c\x67\xe8\x21\x58\x49\x9c\x7e\xb1\xa0\x4f\x00\xac\x38\xb2\xa0\x7e\xa4\xa4\x6e\xf3\x62\x78\x31\xe9\x79\x30\xe3\x74\xea\xf0\x67\xf8\x1b\x9f\xc1\xc5\xb1\x23\x3d\x01\x06\xe0\x7c\xa9\x52\x65\x9a\x9b\xbf\xdc\xf7\x07\x57\xa6\x58\x91\xab\xcc\x3a\x57\xac\x54\xa5\xe1\x4a\xd5\xaa\x7f\x1d\x3e\x7a\x70\x78\xff\xb7\xdb\xbb\xc1\xbe\x2a\xd7\xa1\x2e\xf2\xad\xae\x9a\xf1\xa0\xb1\xf6\x53\x37\xd6\x4c\x6f\x4a\x2c\x32\x55\xc1\xb3\x40\xd0\x29\x06\xc2\x99\xce\xde\x2c\x91\xae\x5f\xeb\x71\x1a\xf8\x87\xf9\x87\xb9\xed\x7c\xf3\x47\xd2\xf6\xbc\x3a\x97\xa5\xeb\xf3\xaa\xa6\x45\x00\x86\x38\xf6\x39\x82\x9c\xb9\x8e\x30\x27\xc6\x67\x15\x19\x02\x30\xf6\x39\xa0\x33\x7a\x00\xee\x3f\x02\x3e\xe1\x48\x0a\x84\x19\xf7\x47\xe8\x4a\x8e\x1d\x8b\x70\xc4\x38\x4c\xe2\x30\xef\x80\x1c\x20\xa7\xce\x1e\xd5\x72\xd6\xb2\xb9\x4a\x77\x1e\x5d\xbe\x09\x17\x86\x5f\x8d\xee\xf6\xee\xf7\xc1\x1b\x50\x96\xc9\xfa\xbf\x30\xd9\x42\x29\xb2\xb4\x69\xe6\x34\xfd\x8f\xa2\x8b\x54\xa2\x7e\x0e\x9d\x49\x97\x8c\xfe\x23\x11\xfa\xad\x79\xaf\xb6\x9d\x0f\xc8\xb1\xd3\x3a\xcc\x96\x4a\x7f\x82\xd5\xfb\x16\x14\x59\x7c\x64\xd4\xed\xaf\x77\xf7\x07\x4e\x65\x45\xd2\x6c\xd3\x5f\x81\xcf\x86\xbb\x6a\xf5\xa8\x87\xe3\x9d\x76\x77\x67\xef\x0f\x6c\x43\xf7\x3f\xea\x5c\x81\xad\x55\x6f\x2d\x41\x65\xe8\xa7\xac\x41\xb2\x5e\x76\x90\x19\xd2\xc9\xc7\xe0\x94\xdb\x55\xe9\x28\x13\x68\xa6\xeb\x90\x55\xf3\x96\xba\x33\xb2\x77\xa2\x5e\xac\xa3\x06\xf5\x99\x6a\x8b\x75\xaa\xd5\x37\x6d\x75\x9c\x88\x77\xad\xd8\x89\x43\x50\x02\x6d\x7f\x93\xdc\xf5\x6b\x4a\x88\xcb\xfd\x59\xdb\x6c\xbb\x0e\x9d\x62\xde\x22\x6c\xef\xa7\x77\x47\xb7\x17\xd9\x51\xd9\xfd\xdb\xb4\xb9\x3b\x0f\x92\xf7\x63\xbb\xef\x65\x1d\x3a\xf3\xd3\xc2\x26\xdf\x03\x00\x00\xff\xff\x63\x16\x0a\xfb\xd7\x08\x00\x00")

func staticMigrations1_initialSqlBytes() ([]byte, error) {
	return bindataRead(
		_staticMigrations1_initialSql,
		"static/migrations/1_initial.sql",
	)
}

func staticMigrations1_initialSql() (*asset, error) {
	bytes, err := staticMigrations1_initialSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/migrations/1_initial.sql", size: 2263, mode: os.FileMode(420), modTime: time.Unix(1523473753, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/migrations/1_initial.sql": staticMigrations1_initialSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"migrations": &bintree{nil, map[string]*bintree{
			"1_initial.sql": &bintree{staticMigrations1_initialSql, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
