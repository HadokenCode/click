// Code generated by go-bindata.
// sources:
// static/migrations/1_initial.sql
// static/migrations/demo/data.sql
// DO NOT EDIT!

package static

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticMigrations1_initialSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x95\x5d\x6f\xda\x4a\x10\x86\xef\xf7\x57\x8c\xac\x48\x40\x4e\x12\x9d\x44\x39\xd2\xd1\xb1\xce\x85\xc1\x03\xd9\xd6\xac\xe9\x7e\x34\xc9\x15\x72\xf1\x8a\x5a\x35\x86\xda\xeb\xa4\x3f\xbf\x5a\x83\xc1\x80\x49\xfa\x11\xd5\x77\x1e\x66\x5e\x66\xde\xc7\xb3\x7b\x79\x09\x7f\x2d\x92\x79\x1e\x19\x0d\x6a\x45\xc8\x80\xa3\x27\x11\xf0\x41\x22\x13\x34\x64\x40\x87\xc0\x42\x09\xf8\x40\x85\x14\xe0\x94\x65\x12\x5f\x2e\x8b\x62\xe5\xb8\x84\x34\x8b\x85\x89\x8c\x5e\xe8\xcc\xf4\xf5\x3c\xc9\x6a\x9d\xa1\x62\x03\x69\x65\xca\x55\x1c\x19\x3d\x35\xc9\x42\x17\x26\x5a\xac\xba\x3d\x02\xc0\x51\x2a\xce\x04\x48\x4e\x47\x23\xe4\xe0\x09\x38\x3b\x4c\x3c\x23\x7d\x1c\x51\x46\xa0\xea\x04\xef\xaf\xce\x81\x0a\xf0\xa9\x90\x94\x0d\x24\x0c\x79\x38\x86\x30\xf0\xaf\xce\x09\x80\xbc\x43\x9b\x08\x55\xde\x5a\x28\x9e\x46\x06\xfe\xfb\x1f\x66\x65\x9e\xeb\xcc\xec\x74\xdd\x2a\x71\xdd\x81\xcd\xb7\xef\x18\x08\x6c\x86\xc3\xc0\xaf\xc2\xcc\x07\x3a\x74\x09\x32\xdf\x25\x2d\x0d\x06\x1e\x1b\x29\x6f\x84\xb0\x4a\x57\xf3\xe2\x6b\xea\xb6\x1b\x83\x59\xbc\xf5\x57\x3e\x4e\x10\x84\xf4\xa4\x12\x76\x6a\x64\x6a\x0c\xdd\x4e\x34\x33\xc9\x93\xee\x5c\x40\xe7\x73\x12\xc7\x3a\xeb\xf4\xdc\x5d\x85\xd7\x0f\x10\x9c\x34\xc9\xbe\x38\xd0\x25\x00\x4e\x12\x3b\x50\x3f\x4a\x51\x7f\xfb\x62\x79\x31\x15\x04\x30\xe1\x74\xec\xf1\x47\x78\x8f\x8f\xe0\xe3\xd0\x53\x81\x04\x0b\x70\x3a\xd7\x99\xb6\xcd\x4d\x9f\x6e\xbb\xbd\x0b\x2b\x56\x16\x3a\x77\x5e\x12\xab\xb2\xb2\x68\xa1\xeb\xac\x8f\x1e\x1f\xdc\x79\xbc\xfb\xcf\xf5\x4d\x6f\x3f\xab\x30\x91\x29\x8b\x75\xde\x66\xc6\x83\xc6\x9a\x4f\xdd\xd8\x76\x7a\x2b\x31\xcb\xf5\x06\x9e\x03\x92\x8e\x51\x48\x6f\x3c\x79\x55\x22\x5b\x3e\xd7\xe3\x6c\xe1\x1f\xd6\x1f\xd6\x36\xeb\xed\x8f\xa4\xe9\xf9\xe6\xbb\xac\x5c\x9f\x6e\x34\x1d\x02\xd0\xc7\x61\xc8\x11\xd4\xc4\xf7\xa4\xfd\x62\x42\xb6\x21\x43\x00\x86\x21\x07\xf4\x06\x77\xc0\xc3\x7b\xc0\x07\x1c\x28\x89\x30\xe1\xe1\x00\x7d\xc5\xb1\x65\x11\x8e\x18\x47\x69\x12\x15\x2d\x90\x05\x72\xea\xed\x51\xad\x66\xad\x9a\xdb\xe4\xbd\x8c\xae\x58\x45\x33\xcb\xaf\x46\x77\x7d\xf3\x6f\xef\x15\x28\xf3\x74\xf9\x29\x4a\xd7\x50\xca\x3c\xdb\x36\x73\x9a\xfe\xef\xa2\x8b\x75\xaa\x7f\x0d\x9d\x2d\x57\x8c\x7e\x50\x08\xdd\xc6\xbc\x17\xeb\xce\x7b\xe4\xd8\x69\x13\xe5\x73\x6d\xde\xc0\xea\x7d\x0b\xca\x3c\x39\x32\xea\xfa\xef\x9b\xdb\x03\xa7\xf2\x32\xdd\x6e\xd3\x3b\x11\xb2\xfe\x4e\xad\x1e\xf5\x70\xbc\xd3\xee\xee\xec\xfd\x89\x6d\x68\xff\xa3\xd6\x15\x58\x5b\xf5\xda\x12\x6c\x0c\x7d\x93\x35\x48\x97\xf3\x16\x32\x7d\x3a\xfa\x23\x70\x66\xcb\xcc\xe8\x6f\xc6\x69\x81\xf3\x43\x5f\xfb\x09\x1e\x95\xb7\xcd\xeb\xc1\x5f\x3e\x67\x84\xf8\x3c\x9c\x34\xe7\x76\xeb\xd0\x29\xfb\x1b\x66\xbb\xfb\xe5\xed\xd1\xf5\x99\x72\x24\xbb\x7f\xb0\x6d\x8f\xb1\x83\xe2\xfd\xd8\xee\xea\xaa\x43\x2f\xdc\xf2\x2e\xf9\x1e\x00\x00\xff\xff\xf0\x23\x89\x85\x62\x08\x00\x00")

func staticMigrations1_initialSqlBytes() ([]byte, error) {
	return bindataRead(
		_staticMigrations1_initialSql,
		"static/migrations/1_initial.sql",
	)
}

func staticMigrations1_initialSql() (*asset, error) {
	bytes, err := staticMigrations1_initialSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/migrations/1_initial.sql", size: 2146, mode: os.FileMode(420), modTime: time.Unix(1522148064, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticMigrationsDemoDataSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x56\xdf\x6f\xa3\x46\x10\x7e\xe7\xaf\x98\x43\x91\xb8\xa8\xde\xb3\xb1\xb1\x81\x44\x7d\xb8\x8b\xb9\xd6\x92\xcf\x89\x92\xb8\x7d\x8c\x86\x65\x20\x5b\xc3\x82\x60\x49\x7a\xaa\xfa\xbf\x57\xcb\xaf\xd8\x4e\x94\xa8\x8d\x2a\xf5\xa1\x79\x08\x5a\x66\xe6\x1b\xbe\x99\x6f\xd6\xc3\x18\xfc\x90\x89\xa4\x44\x45\xb0\x2d\x0c\x63\xff\x7c\xa3\x50\x51\x46\x52\x7d\xa1\x44\x48\x63\x79\x09\x27\x27\xc6\x32\xb8\x58\x7f\xbe\x0e\x00\x20\xa2\x2c\xdf\x56\x54\x02\x6c\xb7\xab\x25\x9c\xfd\x08\x75\x2d\xa2\xbb\x84\x24\xe9\xf0\xbb\x07\xe7\xe3\xe9\xb9\x01\xd0\x47\xf0\x54\xf0\x1d\xe8\xbf\xde\xdf\xc2\x99\x37\xf5\xa7\xd3\x88\x85\x0b\x7b\xce\x9c\xe9\xd4\x65\xe1\xdc\xf7\xd8\x22\x9a\x2d\x66\x33\x3e\xf3\x5d\x44\x6b\x1f\x83\x92\x04\xe0\x10\x63\xe2\xcf\x5d\x9f\x26\x53\x46\x13\x77\xc1\x1c\xcf\x47\xe6\xbb\x8e\xcd\x62\x87\xc7\x53\x5c\xb8\x18\x39\x93\x03\x8c\x38\x2f\x33\x3c\xc2\x88\x1c\x1f\xe7\xf6\x82\x61\x48\xc8\x9c\xd9\x84\x33\xcf\xc5\x19\xb3\x5d\xdf\x9f\x86\x1e\x5f\x90\x33\x3f\xc0\x28\x49\x95\xdf\x0f\x31\x6c\x1f\xf9\x74\x32\x41\xc6\xd1\x75\x98\xe3\x71\x64\xde\xc4\x5b\xb0\xb9\x6d\xc7\xd3\x59\x34\xe1\xce\x8c\x0e\x30\x0a\xac\xaa\x22\x2f\xd5\x1e\x86\x13\xda\xb1\x3d\x99\xcd\x58\x14\xb9\x9c\x39\xf3\x69\xc4\x7c\x27\xe4\x2c\x26\xd7\x9b\xfb\x76\xe8\xd2\x62\x71\x80\x51\x51\x86\xc5\x7d\x5e\xd2\x13\x86\x1b\xfb\xa1\x17\x7a\x0e\xf3\x5d\x37\x66\x4e\x1c\x85\x0c\x9d\x28\x66\x71\x68\xbb\xbe\xed\xc7\xe8\xf9\xae\x75\x6e\x7c\x09\x7e\x5a\x6d\x0c\x80\xd5\xe6\x26\xb8\xbe\x85\xd5\xe6\xf6\x12\xcc\x54\xc8\x9d\x09\x1f\xcd\xba\xa2\xd2\x1c\x81\x29\x22\xfd\x5f\x62\x46\xe6\x29\xfc\xf2\x79\xbd\x0d\x6e\x0c\x4d\xfa\x63\xdf\xfb\x51\xdb\xd5\x11\x58\x17\xfa\xf9\x01\x18\xac\x85\xdc\xc1\x37\x94\x98\x50\x09\x58\x01\xc2\x0d\x95\x0f\x82\x93\x75\x3a\x3a\x0e\xa6\x24\x19\x81\xa5\x9b\xca\x80\x7e\x57\x24\x23\x8a\x20\xc9\x21\x21\x05\x0c\x30\x55\x54\x4a\x54\xe2\x81\x74\xd3\xa0\x52\x28\x23\x2c\x23\x30\x5b\x17\x13\x1e\x85\xba\x07\x84\x98\x1e\x21\x15\x4a\xa5\x04\x61\xad\xa0\xae\x28\xae\x53\x88\x09\x55\x5d\x52\xf5\x42\xde\x46\x02\x23\xb0\xbe\x36\x52\x60\xb0\x44\x85\x70\x91\xa7\x29\x71\x95\xbf\xf9\xd5\x4d\xf3\x75\x74\x2d\xb9\x12\xb9\xc4\x14\x32\xe2\xf7\x28\x45\x95\x41\x88\x15\x45\x90\x4b\xd0\x2f\x24\xa5\x15\xa8\x1c\x0a\x2a\x75\x4a\xc0\xc6\xbf\x82\x92\x0a\x52\x42\x13\x4b\xbf\x43\x2d\x95\x48\xa1\xaa\x39\xa7\xaa\x8a\xeb\xf4\x85\x8c\xbd\x54\x46\x60\x5d\xf5\xaa\x61\x70\x45\x65\x95\x4b\x58\x45\x24\x95\x88\xc5\xdb\xe5\x1e\xd4\x32\x02\xeb\x66\x50\x4e\x81\x4a\xd7\x19\x44\x56\xa4\xcd\xb8\xa3\xfe\xc8\xb6\xb6\x4a\x64\x94\xd7\x0a\xf2\x18\xd2\x9c\xef\xc6\xb5\xd4\x0f\xc8\x0b\x3d\xe2\x0d\x95\x67\x7c\xad\x66\xe8\x0f\x64\x85\xa9\xc0\x4a\xeb\x4a\xeb\xeb\xae\x15\x55\x5d\xca\x23\x4d\xf5\x4a\x4a\x84\xba\xaf\xc3\x71\x73\xfc\x30\xb0\x68\xa5\xd2\xd9\x28\x49\x06\x43\xdf\xcb\xce\xd4\x1c\x07\x63\xdf\xaa\xce\xd8\x1c\x07\xe3\x5e\x55\x3b\x7b\xff\x66\x70\xd9\xaf\x58\xe7\x33\xbc\x7a\x81\xa8\xc2\xb2\xd1\xe5\x11\x53\xa1\x1f\x65\x9d\x1e\x4f\x51\xcf\xf8\x5e\xa9\xa2\x3a\x1b\x8f\xdb\x0c\x9f\x78\x9e\x8d\x77\x98\x89\xb4\xda\xb5\x55\xb0\x46\x60\xfd\x61\xb4\xf7\x9e\x19\x51\xc5\x4b\x51\xe8\xea\x9b\x67\x60\x5e\x95\xf9\x6f\xc4\x95\x6e\x4f\xd3\x11\xb3\xf1\xfb\x73\x60\x70\x9c\xa3\x03\xfe\xd4\xe5\x12\x79\x9b\x62\xfc\x46\x8e\x2c\x6f\x44\x51\x60\x42\xc7\x19\xda\xce\xbc\xc2\x41\x77\x6b\x04\x9b\xed\x7a\x7d\xdc\xb3\x57\x82\xb4\x0b\xc3\x42\xbc\x87\xfb\x71\x9a\xe7\xdc\xfb\x2c\xef\xa0\xdf\x4b\xec\x15\x2e\xad\xec\x0e\x4b\xb0\x27\xbe\x57\x22\x07\x41\xbe\xa3\x0a\x2f\x64\x7a\x5e\x88\xde\xe9\x1d\x85\xd8\x9f\x95\x57\x28\x3d\xcd\x4f\x57\x90\x73\x23\xd8\x2c\xcf\x8d\x93\x93\xf3\x97\xb7\x8f\x40\x46\x87\x7b\xc9\x32\x7f\x94\x7f\x6b\x53\xf9\x7f\xf3\xf8\x2f\x6e\x1e\xcb\x60\x1d\xdc\x06\xf0\xf5\xfa\xf2\xdb\x70\x73\x1a\x00\xbf\xfe\x1c\x5c\x07\x30\x5c\xa0\xb0\xda\x0c\x97\x58\x73\xd3\x74\x43\xdd\x8d\xdd\x93\xb8\x87\x0f\xea\x96\xce\x3d\xf0\xf6\xf7\xe7\xdf\xc1\x6e\x56\xa6\x27\xe8\x7f\x8a\xfa\xf6\x08\xfc\x15\x00\x00\xff\xff\xd1\x12\x5e\xdf\xaa\x0b\x00\x00")

func staticMigrationsDemoDataSqlBytes() ([]byte, error) {
	return bindataRead(
		_staticMigrationsDemoDataSql,
		"static/migrations/demo/data.sql",
	)
}

func staticMigrationsDemoDataSql() (*asset, error) {
	bytes, err := staticMigrationsDemoDataSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/migrations/demo/data.sql", size: 2986, mode: os.FileMode(420), modTime: time.Unix(1522313919, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/migrations/1_initial.sql": staticMigrations1_initialSql,
	"static/migrations/demo/data.sql": staticMigrationsDemoDataSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"migrations": &bintree{nil, map[string]*bintree{
			"1_initial.sql": &bintree{staticMigrations1_initialSql, map[string]*bintree{}},
			"demo": &bintree{nil, map[string]*bintree{
				"data.sql": &bintree{staticMigrationsDemoDataSql, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

